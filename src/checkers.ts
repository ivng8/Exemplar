/*
 * Do not edit this file.
 */

export abstract class WordleChecker {
  constructor(protected readonly answer: string) {
    this.answer = answer.toLocaleLowerCase();
  }

  // Compares guess against the secret answer and returns a string
  // describing how closely the guess matches the answer.
  // The guess does not have to be a dictionary word.
  // The returned string has the same length as the guess and
  // contains one character corresponding to each letter in the guess.
  // Each character in the returned string will be one of
  // the following:
  // - The guessed letter, matching the case used in the guess.
  //   Indicates that the guessed letter is present in that same position
  //   in the answer.
  //   For example, if the secret answer is "hat" and the guess is "Hip", the
  //   first character of the returned string would be "H".
  // - A question mark (?). Indicates that the guessed letter is present
  //   in the secret answer *at another position.*
  //   For example, if the secret answer is "hat" and the guess is "tie", the
  //   first character of the returned string would be "?".
  // - A hyphen (-). Indicates that the guessed letter is not present in the
  //   secret answer.
  //   Each guessed letter can only correspond to ONE letter in the answer.
  //   For example, if the secret answer is "hi" and the guess is "hh",
  //   the returned string would be "h-", not "h?".
  // Comparing the guess and the answer proceeds from left to right.
  //
  // Throws Error with the message
  // "Guesses must be the same length as the secret word (${answer length} letters)"
  // if the length of the guess is not the same as the length of the answer, with
  // ${answer length} replaced with the integer length of the string.
  //
  // Throws error with the message
  // "Guesses may only contain alphabetical characters (A-Z a-z)"
  // if the guess contains non alphabetical characters.
  // For simplicity, we define alphabetical characters as
  // ASCII characters with decimal values [65-90] and [97-122], inclusive.
  abstract check(guess: string): string;
}

export class CorrectChecker extends WordleChecker {
  check(guess: string): string {
    if (guess.length !== this.answer.length) {
      throw new Error(
        'Guesses must be the same length as the '
        + `secret word (${this.answer.length} letters)`);
    }

    if (!(new RegExp(/^[a-zA-Z]+$/)).test(guess)) {
      throw new Error(
        'Guesses may only contain alphabetical characters (A-Z a-z)'
      )
    }

    let guess_lower = guess.toLocaleLowerCase();
    let result = new Array(guess_lower.length).fill('-');
  
    let correct_indices: number[] = [];
    for (let i = 0; i < guess_lower.length; i += 1) {
      if (guess_lower.charAt(i) === this.answer.charAt(i)) {
        result[i] = guess.charAt(i);
        correct_indices.push(i);
      }
    }
  
    let skip_indices: number[] = [...correct_indices];
    for (let i = 0; i < guess_lower.length; i += 1) {
      if (correct_indices.includes(i)) {
        continue;
      }
      let found_index = this._find_letter_index(guess_lower.charAt(i), skip_indices);
      if (found_index !== null) {
        result[i] = '?';
        skip_indices.push(found_index);
      }
    }
  
    return result.join('');
  }

  private _find_letter_index(letter: string, skip_indices: number[]) {
    for (let i = 0; i < this.answer.length; i += 1) {
      if (skip_indices.includes(i)) {
        continue;
      }

      if (letter === this.answer.charAt(i)) {
        return i;
      }
    }
    return null;
  }
}
