{
  "suites": {
    "title": "",
    "fullTitle": "",
    "suites": [],
    "tests": [
      {
        "title": "looks for correct_indices before looking for found_index",
        "fullTitle": "WordleChecker looks for correct_indices before looking for found_index",
        "status": "PASS",
        "error": null
      },
      {
        "title": "looks for correct_indices before looking for found_index",
        "fullTitle": "WordleChecker looks for correct_indices before looking for found_index",
        "status": "PASS",
        "error": null
      },
      {
        "title": "looks for correct_indices before looking for found_index",
        "fullTitle": "WordleChecker looks for correct_indices before looking for found_index",
        "status": "PASS",
        "error": null
      },
      {
        "title": "makes sure a letter found after the fact will still be incorrect instead of displaced",
        "fullTitle": "WordleChecker makes sure a letter found after the fact will still be incorrect instead of displaced",
        "status": "PASS",
        "error": null
      },
      {
        "title": "a letter displaced but for two different letters",
        "fullTitle": "WordleChecker a letter displaced but for two different letters",
        "status": "PASS",
        "error": null
      },
      {
        "title": "still checks for a displaced letter after one is found",
        "fullTitle": "WordleChecker still checks for a displaced letter after one is found",
        "status": "PASS",
        "error": null
      },
      {
        "title": "makes sure that the result is initialized as all wrong letters",
        "fullTitle": "WordleChecker makes sure that the result is initialized as all wrong letters",
        "status": "PASS",
        "error": null
      },
      {
        "title": "correctly detects all scrambled letters",
        "fullTitle": "WordleChecker correctly detects all scrambled letters",
        "status": "PASS",
        "error": null
      },
      {
        "title": "makes sure skip_indices adds found_index to avoid repeating indentification",
        "fullTitle": "WordleChecker makes sure skip_indices adds found_index to avoid repeating indentification",
        "status": "PASS",
        "error": null
      },
      {
        "title": "there is a need for 2 of a letter but three appear in the guess so all 3 statuses appear",
        "fullTitle": "WordleChecker there is a need for 2 of a letter but three appear in the guess so all 3 statuses appear",
        "status": "PASS",
        "error": null
      },
      {
        "title": "standard case of words with no incorrect letters",
        "fullTitle": "WordleChecker standard case of words with no incorrect letters",
        "status": "PASS",
        "error": null
      },
      {
        "title": "labels letter as wrong because duplicate letter is correct",
        "fullTitle": "WordleChecker labels letter as wrong because duplicate letter is correct",
        "status": "PASS",
        "error": null
      },
      {
        "title": "standard case of correct word",
        "fullTitle": "WordleChecker standard case of correct word",
        "status": "PASS",
        "error": null
      },
      {
        "title": "only needs two displacements of a duplicate letter",
        "fullTitle": "WordleChecker only needs two displacements of a duplicate letter",
        "status": "PASS",
        "error": null
      },
      {
        "title": "needing one displacement because one correct letter is detected",
        "fullTitle": "WordleChecker needing one displacement because one correct letter is detected",
        "status": "PASS",
        "error": null
      },
      {
        "title": "needing one displacement because one correct letter is detected",
        "fullTitle": "WordleChecker needing one displacement because one correct letter is detected",
        "status": "PASS",
        "error": null
      },
      {
        "title": "makes sure all duplicates are incorrect instead of displaced when they have been filled in",
        "fullTitle": "WordleChecker makes sure all duplicates are incorrect instead of displaced when they have been filled in",
        "status": "PASS",
        "error": null
      },
      {
        "title": "correctly labels duplicates by prioritizing correct then displaced then incorrect from left to right",
        "fullTitle": "WordleChecker correctly labels duplicates by prioritizing correct then displaced then incorrect from left to right",
        "status": "PASS",
        "error": null
      },
      {
        "title": "correctly labels duplicates by prioritizing correct then displaced then incorrect from left to right",
        "fullTitle": "WordleChecker correctly labels duplicates by prioritizing correct then displaced then incorrect from left to right",
        "status": "FAIL",
        "error": "Error: Guesses must be the same length as the secret word (13 letters)\n    at CorrectChecker.check (C:\\Users\\Ivan\\Exemplar\\src\\checkers.ts:49:13)\n    at Object.check (C:\\Users\\Ivan\\Exemplar\\src\\checker-tests.spec.ts:127:20)\n    at Promise.then.completed (C:\\Users\\Ivan\\Exemplar\\node_modules\\jest-circus\\build\\utils.js:298:28)\n    at new Promise (<anonymous>)\n    at callAsyncCircusFn (C:\\Users\\Ivan\\Exemplar\\node_modules\\jest-circus\\build\\utils.js:231:10)\n    at _callCircusTest (C:\\Users\\Ivan\\Exemplar\\node_modules\\jest-circus\\build\\run.js:316:40)\n    at processTicksAndRejections (node:internal/process/task_queues:95:5)\n    at _runTest (C:\\Users\\Ivan\\Exemplar\\node_modules\\jest-circus\\build\\run.js:252:3)\n    at _runTestsForDescribeBlock (C:\\Users\\Ivan\\Exemplar\\node_modules\\jest-circus\\build\\run.js:126:9)\n    at _runTestsForDescribeBlock (C:\\Users\\Ivan\\Exemplar\\node_modules\\jest-circus\\build\\run.js:121:9)\n    at run (C:\\Users\\Ivan\\Exemplar\\node_modules\\jest-circus\\build\\run.js:71:3)\n    at runAndTransformResultsToJestFormat (C:\\Users\\Ivan\\Exemplar\\node_modules\\jest-circus\\build\\legacy-code-todo-rewrite\\jestAdapterInit.js:122:21)\n    at jestAdapter (C:\\Users\\Ivan\\Exemplar\\node_modules\\jest-circus\\build\\legacy-code-todo-rewrite\\jestAdapter.js:79:19)\n    at runTestInternal (C:\\Users\\Ivan\\Exemplar\\node_modules\\jest-runner\\build\\runTest.js:367:16)\n    at runTest (C:\\Users\\Ivan\\Exemplar\\node_modules\\jest-runner\\build\\runTest.js:444:34)"
      }
    ],
    "pass": 18,
    "fail": 1
  },
  "stats": {
    "numFailedTestSuites": 1,
    "numFailedTests": 1,
    "numPassedTestSuites": 0,
    "numPassedTests": 18,
    "numPendingTestSuites": 0,
    "numPendingTests": 0,
    "numRuntimeErrorTestSuites": 0,
    "numTodoTests": 0,
    "numTotalTestSuites": 1,
    "numTotalTests": 19,
    "openHandles": [],
    "snapshot": {
      "added": 0,
      "didUpdate": false,
      "failure": false,
      "filesAdded": 0,
      "filesRemoved": 0,
      "filesRemovedList": [],
      "filesUnmatched": 0,
      "filesUpdated": 0,
      "matched": 0,
      "total": 0,
      "unchecked": 0,
      "uncheckedKeysByFile": [],
      "unmatched": 0,
      "updated": 0
    },
    "startTime": 1729814107305,
    "success": false,
    "testResults": [
      {
        "leaks": false,
        "numFailingTests": 1,
        "numPassingTests": 18,
        "numPendingTests": 0,
        "numTodoTests": 0,
        "openHandles": [],
        "perfStats": {
          "end": 1729814113489,
          "runtime": 5677,
          "slow": true,
          "start": 1729814107812
        },
        "skipped": false,
        "snapshot": {
          "added": 0,
          "fileDeleted": false,
          "matched": 0,
          "unchecked": 0,
          "uncheckedKeys": [],
          "unmatched": 0,
          "updated": 0
        },
        "testFilePath": "C:\\Users\\Ivan\\Exemplar\\src\\checker-tests.spec.ts",
        "testResults": [
          {
            "ancestorTitles": [
              "WordleChecker"
            ],
            "duration": 2,
            "failureDetails": [],
            "failureMessages": [],
            "fullName": "WordleChecker looks for correct_indices before looking for found_index",
            "invocations": 1,
            "location": null,
            "numPassingAsserts": 0,
            "retryReasons": [],
            "status": "passed",
            "title": "looks for correct_indices before looking for found_index"
          },
          {
            "ancestorTitles": [
              "WordleChecker"
            ],
            "duration": 0,
            "failureDetails": [],
            "failureMessages": [],
            "fullName": "WordleChecker looks for correct_indices before looking for found_index",
            "invocations": 1,
            "location": null,
            "numPassingAsserts": 0,
            "retryReasons": [],
            "status": "passed",
            "title": "looks for correct_indices before looking for found_index"
          },
          {
            "ancestorTitles": [
              "WordleChecker"
            ],
            "duration": 0,
            "failureDetails": [],
            "failureMessages": [],
            "fullName": "WordleChecker looks for correct_indices before looking for found_index",
            "invocations": 1,
            "location": null,
            "numPassingAsserts": 0,
            "retryReasons": [],
            "status": "passed",
            "title": "looks for correct_indices before looking for found_index"
          },
          {
            "ancestorTitles": [
              "WordleChecker"
            ],
            "duration": 0,
            "failureDetails": [],
            "failureMessages": [],
            "fullName": "WordleChecker makes sure a letter found after the fact will still be incorrect instead of displaced",
            "invocations": 1,
            "location": null,
            "numPassingAsserts": 0,
            "retryReasons": [],
            "status": "passed",
            "title": "makes sure a letter found after the fact will still be incorrect instead of displaced"
          },
          {
            "ancestorTitles": [
              "WordleChecker"
            ],
            "duration": 0,
            "failureDetails": [],
            "failureMessages": [],
            "fullName": "WordleChecker a letter displaced but for two different letters",
            "invocations": 1,
            "location": null,
            "numPassingAsserts": 0,
            "retryReasons": [],
            "status": "passed",
            "title": "a letter displaced but for two different letters"
          },
          {
            "ancestorTitles": [
              "WordleChecker"
            ],
            "duration": 0,
            "failureDetails": [],
            "failureMessages": [],
            "fullName": "WordleChecker still checks for a displaced letter after one is found",
            "invocations": 1,
            "location": null,
            "numPassingAsserts": 0,
            "retryReasons": [],
            "status": "passed",
            "title": "still checks for a displaced letter after one is found"
          },
          {
            "ancestorTitles": [
              "WordleChecker"
            ],
            "duration": 0,
            "failureDetails": [],
            "failureMessages": [],
            "fullName": "WordleChecker makes sure that the result is initialized as all wrong letters",
            "invocations": 1,
            "location": null,
            "numPassingAsserts": 0,
            "retryReasons": [],
            "status": "passed",
            "title": "makes sure that the result is initialized as all wrong letters"
          },
          {
            "ancestorTitles": [
              "WordleChecker"
            ],
            "duration": 0,
            "failureDetails": [],
            "failureMessages": [],
            "fullName": "WordleChecker correctly detects all scrambled letters",
            "invocations": 1,
            "location": null,
            "numPassingAsserts": 0,
            "retryReasons": [],
            "status": "passed",
            "title": "correctly detects all scrambled letters"
          },
          {
            "ancestorTitles": [
              "WordleChecker"
            ],
            "duration": 0,
            "failureDetails": [],
            "failureMessages": [],
            "fullName": "WordleChecker makes sure skip_indices adds found_index to avoid repeating indentification",
            "invocations": 1,
            "location": null,
            "numPassingAsserts": 0,
            "retryReasons": [],
            "status": "passed",
            "title": "makes sure skip_indices adds found_index to avoid repeating indentification"
          },
          {
            "ancestorTitles": [
              "WordleChecker"
            ],
            "duration": 0,
            "failureDetails": [],
            "failureMessages": [],
            "fullName": "WordleChecker there is a need for 2 of a letter but three appear in the guess so all 3 statuses appear",
            "invocations": 1,
            "location": null,
            "numPassingAsserts": 0,
            "retryReasons": [],
            "status": "passed",
            "title": "there is a need for 2 of a letter but three appear in the guess so all 3 statuses appear"
          },
          {
            "ancestorTitles": [
              "WordleChecker"
            ],
            "duration": 0,
            "failureDetails": [],
            "failureMessages": [],
            "fullName": "WordleChecker standard case of words with no incorrect letters",
            "invocations": 1,
            "location": null,
            "numPassingAsserts": 0,
            "retryReasons": [],
            "status": "passed",
            "title": "standard case of words with no incorrect letters"
          },
          {
            "ancestorTitles": [
              "WordleChecker"
            ],
            "duration": 0,
            "failureDetails": [],
            "failureMessages": [],
            "fullName": "WordleChecker labels letter as wrong because duplicate letter is correct",
            "invocations": 1,
            "location": null,
            "numPassingAsserts": 0,
            "retryReasons": [],
            "status": "passed",
            "title": "labels letter as wrong because duplicate letter is correct"
          },
          {
            "ancestorTitles": [
              "WordleChecker"
            ],
            "duration": 1,
            "failureDetails": [],
            "failureMessages": [],
            "fullName": "WordleChecker standard case of correct word",
            "invocations": 1,
            "location": null,
            "numPassingAsserts": 0,
            "retryReasons": [],
            "status": "passed",
            "title": "standard case of correct word"
          },
          {
            "ancestorTitles": [
              "WordleChecker"
            ],
            "duration": 0,
            "failureDetails": [],
            "failureMessages": [],
            "fullName": "WordleChecker only needs two displacements of a duplicate letter",
            "invocations": 1,
            "location": null,
            "numPassingAsserts": 0,
            "retryReasons": [],
            "status": "passed",
            "title": "only needs two displacements of a duplicate letter"
          },
          {
            "ancestorTitles": [
              "WordleChecker"
            ],
            "duration": 0,
            "failureDetails": [],
            "failureMessages": [],
            "fullName": "WordleChecker needing one displacement because one correct letter is detected",
            "invocations": 1,
            "location": null,
            "numPassingAsserts": 0,
            "retryReasons": [],
            "status": "passed",
            "title": "needing one displacement because one correct letter is detected"
          },
          {
            "ancestorTitles": [
              "WordleChecker"
            ],
            "duration": 0,
            "failureDetails": [],
            "failureMessages": [],
            "fullName": "WordleChecker needing one displacement because one correct letter is detected",
            "invocations": 1,
            "location": null,
            "numPassingAsserts": 0,
            "retryReasons": [],
            "status": "passed",
            "title": "needing one displacement because one correct letter is detected"
          },
          {
            "ancestorTitles": [
              "WordleChecker"
            ],
            "duration": 0,
            "failureDetails": [],
            "failureMessages": [],
            "fullName": "WordleChecker makes sure all duplicates are incorrect instead of displaced when they have been filled in",
            "invocations": 1,
            "location": null,
            "numPassingAsserts": 0,
            "retryReasons": [],
            "status": "passed",
            "title": "makes sure all duplicates are incorrect instead of displaced when they have been filled in"
          },
          {
            "ancestorTitles": [
              "WordleChecker"
            ],
            "duration": 0,
            "failureDetails": [],
            "failureMessages": [],
            "fullName": "WordleChecker correctly labels duplicates by prioritizing correct then displaced then incorrect from left to right",
            "invocations": 1,
            "location": null,
            "numPassingAsserts": 0,
            "retryReasons": [],
            "status": "passed",
            "title": "correctly labels duplicates by prioritizing correct then displaced then incorrect from left to right"
          },
          {
            "ancestorTitles": [
              "WordleChecker"
            ],
            "duration": 0,
            "failureDetails": [
              {}
            ],
            "failureMessages": [
              "Error: Guesses must be the same length as the secret word (13 letters)\n    at CorrectChecker.check (C:\\Users\\Ivan\\Exemplar\\src\\checkers.ts:49:13)\n    at Object.check (C:\\Users\\Ivan\\Exemplar\\src\\checker-tests.spec.ts:127:20)\n    at Promise.then.completed (C:\\Users\\Ivan\\Exemplar\\node_modules\\jest-circus\\build\\utils.js:298:28)\n    at new Promise (<anonymous>)\n    at callAsyncCircusFn (C:\\Users\\Ivan\\Exemplar\\node_modules\\jest-circus\\build\\utils.js:231:10)\n    at _callCircusTest (C:\\Users\\Ivan\\Exemplar\\node_modules\\jest-circus\\build\\run.js:316:40)\n    at processTicksAndRejections (node:internal/process/task_queues:95:5)\n    at _runTest (C:\\Users\\Ivan\\Exemplar\\node_modules\\jest-circus\\build\\run.js:252:3)\n    at _runTestsForDescribeBlock (C:\\Users\\Ivan\\Exemplar\\node_modules\\jest-circus\\build\\run.js:126:9)\n    at _runTestsForDescribeBlock (C:\\Users\\Ivan\\Exemplar\\node_modules\\jest-circus\\build\\run.js:121:9)\n    at run (C:\\Users\\Ivan\\Exemplar\\node_modules\\jest-circus\\build\\run.js:71:3)\n    at runAndTransformResultsToJestFormat (C:\\Users\\Ivan\\Exemplar\\node_modules\\jest-circus\\build\\legacy-code-todo-rewrite\\jestAdapterInit.js:122:21)\n    at jestAdapter (C:\\Users\\Ivan\\Exemplar\\node_modules\\jest-circus\\build\\legacy-code-todo-rewrite\\jestAdapter.js:79:19)\n    at runTestInternal (C:\\Users\\Ivan\\Exemplar\\node_modules\\jest-runner\\build\\runTest.js:367:16)\n    at runTest (C:\\Users\\Ivan\\Exemplar\\node_modules\\jest-runner\\build\\runTest.js:444:34)"
            ],
            "fullName": "WordleChecker correctly labels duplicates by prioritizing correct then displaced then incorrect from left to right",
            "invocations": 1,
            "location": null,
            "numPassingAsserts": 0,
            "retryReasons": [],
            "status": "failed",
            "title": "correctly labels duplicates by prioritizing correct then displaced then incorrect from left to right"
          }
        ],
        "failureMessage": "\u001b[1m\u001b[31m  \u001b[1m● \u001b[22m\u001b[1mWordleChecker › correctly labels duplicates by prioritizing correct then displaced then incorrect from left to right\u001b[39m\u001b[22m\n\n    Guesses must be the same length as the secret word (13 letters)\n\u001b[2m\u001b[22m\n\u001b[2m    \u001b[0m \u001b[90m 47 |\u001b[39m   check(guess\u001b[33m:\u001b[39m string)\u001b[33m:\u001b[39m string {\u001b[0m\u001b[22m\n\u001b[2m    \u001b[0m \u001b[90m 48 |\u001b[39m     \u001b[36mif\u001b[39m (guess\u001b[33m.\u001b[39mlength \u001b[33m!==\u001b[39m \u001b[36mthis\u001b[39m\u001b[33m.\u001b[39manswer\u001b[33m.\u001b[39mlength) {\u001b[0m\u001b[22m\n\u001b[2m    \u001b[0m\u001b[31m\u001b[1m>\u001b[22m\u001b[2m\u001b[39m\u001b[90m 49 |\u001b[39m       \u001b[36mthrow\u001b[39m \u001b[36mnew\u001b[39m \u001b[33mError\u001b[39m(\u001b[0m\u001b[22m\n\u001b[2m    \u001b[0m \u001b[90m    |\u001b[39m             \u001b[31m\u001b[1m^\u001b[22m\u001b[2m\u001b[39m\u001b[0m\u001b[22m\n\u001b[2m    \u001b[0m \u001b[90m 50 |\u001b[39m         \u001b[32m'Guesses must be the same length as the '\u001b[39m\u001b[0m\u001b[22m\n\u001b[2m    \u001b[0m \u001b[90m 51 |\u001b[39m         \u001b[33m+\u001b[39m \u001b[32m`secret word (${this.answer.length} letters)`\u001b[39m)\u001b[33m;\u001b[39m\u001b[0m\u001b[22m\n\u001b[2m    \u001b[0m \u001b[90m 52 |\u001b[39m     }\u001b[0m\u001b[22m\n\u001b[2m\u001b[22m\n\u001b[2m      \u001b[2mat CorrectChecker.check (\u001b[22m\u001b[2msrc/checkers.ts\u001b[2m:49:13)\u001b[22m\u001b[2m\u001b[22m\n\u001b[2m      \u001b[2mat Object.check (\u001b[22m\u001b[2m\u001b[0m\u001b[36msrc/checker-tests.spec.ts\u001b[39m\u001b[0m\u001b[2m:127:20)\u001b[22m\u001b[2m\u001b[22m\n"
      }
    ],
    "wasInterrupted": false
  }
}