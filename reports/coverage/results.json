{
  "suites": {
    "title": "",
    "fullTitle": "",
    "suites": [],
    "tests": [
      {
        "title": "returns the guessed word when it matches the answer",
        "fullTitle": "WordleChecker returns the guessed word when it matches the answer",
        "status": "PASS",
        "error": null
      },
      {
        "title": "looks for correct_indices before looking for found_index",
        "fullTitle": "WordleChecker looks for correct_indices before looking for found_index",
        "status": "PASS",
        "error": null
      },
      {
        "title": "a letter displaced but for two different letters",
        "fullTitle": "WordleChecker a letter displaced but for two different letters",
        "status": "PASS",
        "error": null
      },
      {
        "title": "still checks for a displaced letter after one is found",
        "fullTitle": "WordleChecker still checks for a displaced letter after one is found",
        "status": "PASS",
        "error": null
      },
      {
        "title": "makes sure that the result is initialized as all wrong letters",
        "fullTitle": "WordleChecker makes sure that the result is initialized as all wrong letters",
        "status": "PASS",
        "error": null
      },
      {
        "title": "correctly detects all scrambled letters",
        "fullTitle": "WordleChecker correctly detects all scrambled letters",
        "status": "PASS",
        "error": null
      },
      {
        "title": "makes sure skip_indices adds found_index to avoid repeating indentification",
        "fullTitle": "WordleChecker makes sure skip_indices adds found_index to avoid repeating indentification",
        "status": "PASS",
        "error": null
      },
      {
        "title": "there is a need for 2 of a letter but three appear in the guess so all 3 statuses appear",
        "fullTitle": "WordleChecker there is a need for 2 of a letter but three appear in the guess so all 3 statuses appear",
        "status": "PASS",
        "error": null
      },
      {
        "title": "standard case of words with no incorrect letters",
        "fullTitle": "WordleChecker standard case of words with no incorrect letters",
        "status": "PASS",
        "error": null
      },
      {
        "title": "labels letter as wrong because duplicate letter is correct",
        "fullTitle": "WordleChecker labels letter as wrong because duplicate letter is correct",
        "status": "PASS",
        "error": null
      },
      {
        "title": "standard case of correct word",
        "fullTitle": "WordleChecker standard case of correct word",
        "status": "PASS",
        "error": null
      },
      {
        "title": "only needs two displacements of a duplicate letter",
        "fullTitle": "WordleChecker only needs two displacements of a duplicate letter",
        "status": "PASS",
        "error": null
      },
      {
        "title": "needing one displacement because one correct letter is detected",
        "fullTitle": "WordleChecker needing one displacement because one correct letter is detected",
        "status": "PASS",
        "error": null
      }
    ],
    "pass": 13,
    "fail": 0
  },
  "stats": {
    "numFailedTestSuites": 0,
    "numFailedTests": 0,
    "numPassedTestSuites": 1,
    "numPassedTests": 13,
    "numPendingTestSuites": 0,
    "numPendingTests": 0,
    "numRuntimeErrorTestSuites": 0,
    "numTodoTests": 0,
    "numTotalTestSuites": 1,
    "numTotalTests": 13,
    "openHandles": [],
    "snapshot": {
      "added": 0,
      "didUpdate": false,
      "failure": false,
      "filesAdded": 0,
      "filesRemoved": 0,
      "filesRemovedList": [],
      "filesUnmatched": 0,
      "filesUpdated": 0,
      "matched": 0,
      "total": 0,
      "unchecked": 0,
      "uncheckedKeysByFile": [],
      "unmatched": 0,
      "updated": 0
    },
    "startTime": 1729647792568,
    "success": false,
    "testResults": [
      {
        "leaks": false,
        "numFailingTests": 0,
        "numPassingTests": 13,
        "numPendingTests": 0,
        "numTodoTests": 0,
        "openHandles": [],
        "perfStats": {
          "end": 1729647793153,
          "runtime": 551,
          "slow": false,
          "start": 1729647792602
        },
        "skipped": false,
        "snapshot": {
          "added": 0,
          "fileDeleted": false,
          "matched": 0,
          "unchecked": 0,
          "uncheckedKeys": [],
          "unmatched": 0,
          "updated": 0
        },
        "testFilePath": "C:\\Users\\Ivan\\Exemplar\\src\\checker-tests.spec.ts",
        "testResults": [
          {
            "ancestorTitles": [
              "WordleChecker"
            ],
            "duration": 1,
            "failureDetails": [],
            "failureMessages": [],
            "fullName": "WordleChecker returns the guessed word when it matches the answer",
            "invocations": 1,
            "location": null,
            "numPassingAsserts": 0,
            "retryReasons": [],
            "status": "passed",
            "title": "returns the guessed word when it matches the answer"
          },
          {
            "ancestorTitles": [
              "WordleChecker"
            ],
            "duration": 0,
            "failureDetails": [],
            "failureMessages": [],
            "fullName": "WordleChecker looks for correct_indices before looking for found_index",
            "invocations": 1,
            "location": null,
            "numPassingAsserts": 0,
            "retryReasons": [],
            "status": "passed",
            "title": "looks for correct_indices before looking for found_index"
          },
          {
            "ancestorTitles": [
              "WordleChecker"
            ],
            "duration": 1,
            "failureDetails": [],
            "failureMessages": [],
            "fullName": "WordleChecker a letter displaced but for two different letters",
            "invocations": 1,
            "location": null,
            "numPassingAsserts": 0,
            "retryReasons": [],
            "status": "passed",
            "title": "a letter displaced but for two different letters"
          },
          {
            "ancestorTitles": [
              "WordleChecker"
            ],
            "duration": 2,
            "failureDetails": [],
            "failureMessages": [],
            "fullName": "WordleChecker still checks for a displaced letter after one is found",
            "invocations": 1,
            "location": null,
            "numPassingAsserts": 0,
            "retryReasons": [],
            "status": "passed",
            "title": "still checks for a displaced letter after one is found"
          },
          {
            "ancestorTitles": [
              "WordleChecker"
            ],
            "duration": 0,
            "failureDetails": [],
            "failureMessages": [],
            "fullName": "WordleChecker makes sure that the result is initialized as all wrong letters",
            "invocations": 1,
            "location": null,
            "numPassingAsserts": 0,
            "retryReasons": [],
            "status": "passed",
            "title": "makes sure that the result is initialized as all wrong letters"
          },
          {
            "ancestorTitles": [
              "WordleChecker"
            ],
            "duration": 0,
            "failureDetails": [],
            "failureMessages": [],
            "fullName": "WordleChecker correctly detects all scrambled letters",
            "invocations": 1,
            "location": null,
            "numPassingAsserts": 0,
            "retryReasons": [],
            "status": "passed",
            "title": "correctly detects all scrambled letters"
          },
          {
            "ancestorTitles": [
              "WordleChecker"
            ],
            "duration": 1,
            "failureDetails": [],
            "failureMessages": [],
            "fullName": "WordleChecker makes sure skip_indices adds found_index to avoid repeating indentification",
            "invocations": 1,
            "location": null,
            "numPassingAsserts": 0,
            "retryReasons": [],
            "status": "passed",
            "title": "makes sure skip_indices adds found_index to avoid repeating indentification"
          },
          {
            "ancestorTitles": [
              "WordleChecker"
            ],
            "duration": 0,
            "failureDetails": [],
            "failureMessages": [],
            "fullName": "WordleChecker there is a need for 2 of a letter but three appear in the guess so all 3 statuses appear",
            "invocations": 1,
            "location": null,
            "numPassingAsserts": 0,
            "retryReasons": [],
            "status": "passed",
            "title": "there is a need for 2 of a letter but three appear in the guess so all 3 statuses appear"
          },
          {
            "ancestorTitles": [
              "WordleChecker"
            ],
            "duration": 0,
            "failureDetails": [],
            "failureMessages": [],
            "fullName": "WordleChecker standard case of words with no incorrect letters",
            "invocations": 1,
            "location": null,
            "numPassingAsserts": 0,
            "retryReasons": [],
            "status": "passed",
            "title": "standard case of words with no incorrect letters"
          },
          {
            "ancestorTitles": [
              "WordleChecker"
            ],
            "duration": 0,
            "failureDetails": [],
            "failureMessages": [],
            "fullName": "WordleChecker labels letter as wrong because duplicate letter is correct",
            "invocations": 1,
            "location": null,
            "numPassingAsserts": 0,
            "retryReasons": [],
            "status": "passed",
            "title": "labels letter as wrong because duplicate letter is correct"
          },
          {
            "ancestorTitles": [
              "WordleChecker"
            ],
            "duration": 0,
            "failureDetails": [],
            "failureMessages": [],
            "fullName": "WordleChecker standard case of correct word",
            "invocations": 1,
            "location": null,
            "numPassingAsserts": 0,
            "retryReasons": [],
            "status": "passed",
            "title": "standard case of correct word"
          },
          {
            "ancestorTitles": [
              "WordleChecker"
            ],
            "duration": 0,
            "failureDetails": [],
            "failureMessages": [],
            "fullName": "WordleChecker only needs two displacements of a duplicate letter",
            "invocations": 1,
            "location": null,
            "numPassingAsserts": 0,
            "retryReasons": [],
            "status": "passed",
            "title": "only needs two displacements of a duplicate letter"
          },
          {
            "ancestorTitles": [
              "WordleChecker"
            ],
            "duration": 1,
            "failureDetails": [],
            "failureMessages": [],
            "fullName": "WordleChecker needing one displacement because one correct letter is detected",
            "invocations": 1,
            "location": null,
            "numPassingAsserts": 0,
            "retryReasons": [],
            "status": "passed",
            "title": "needing one displacement because one correct letter is detected"
          }
        ],
        "failureMessage": null
      }
    ],
    "wasInterrupted": false
  }
}